def gradcam_uint8(img_tensor, grad_model, class_index, out_size, focus_pct=92.0, blur_sigma=0.8):
    import numpy as np
    import cv2
    import tensorflow as tf

    # Forward + gradient wrt selected class
    with tf.GradientTape() as tape:
        conv_out, preds = grad_model(img_tensor)
        target = preds[:, int(class_index)]
    grads = tape.gradient(target, conv_out)

    # Channel weights and CAM
    w = tf.reduce_mean(grads, axis=(1, 2), keepdims=True)
    cam = tf.reduce_sum(w * conv_out, axis=-1)
    cam = tf.nn.relu(cam)[0].numpy()

    # Normalize 0..1
    mmin, mmax = cam.min(), cam.max()
    cam = (cam - mmin) / (mmax - mmin + 1e-6)

    # Resize to (H, W)
    H, W = int(out_size[0]), int(out_size[1])
    cam = cv2.resize(cam, (W, H), interpolation=cv2.INTER_CUBIC)

    # Gentle denoise
    try:
        sigma = float(blur_sigma)
    except Exception:
        sigma = 0.8
    if sigma > 0:
        cam = cv2.GaussianBlur(cam, (0, 0), sigmaX=sigma)

    # Keep strongest region: top-k% + largest component
    try:
        pct = float(focus_pct)
    except Exception:
        pct = 92.0
    pct = max(70.0, min(99.5, pct))
    t = np.percentile(cam, pct)
    binmap = (cam >= t).astype(np.uint8)

    # Morphological clean-up
    k3 = np.ones((3, 3), np.uint8)
    k5 = np.ones((5, 5), np.uint8)
    binmap = cv2.morphologyEx(binmap, cv2.MORPH_OPEN, k3, iterations=1)
    binmap = cv2.morphologyEx(binmap, cv2.MORPH_CLOSE, k5, iterations=1)

    # Keep only largest connected component
    num_labels, labels = cv2.connectedComponents(binmap, connectivity=8)
    if num_labels > 1:
        areas = np.bincount(labels.ravel())
        areas[0] = 0
        keep = int(areas.argmax())
        binmap = (labels == keep).astype(np.uint8)

    # Apply ROI mask and renormalize
    cam = cam * binmap
    mmin, mmax = cam.min(), cam.max()
    cam = (cam - mmin) / (mmax - mmin + 1e-6) if mmax > mmin else np.zeros_like(cam, dtype=np.float32)

    heat = (cam * 255.0).astype("uint8")
    return cv2.applyColorMap(heat, cv2.COLORMAP_JET)
